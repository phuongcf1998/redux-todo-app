{"ast":null,"code":"// const initState = [\n//   { id: 1, name: \"Studying\", completed: false, priority: \"Medium\" },\n//   { id: 2, name: \"Play game\", completed: true, priority: \"Low\" },\n//   { id: 3, name: \"Watch movie\", completed: false, priority: \"High\" },\n// ];\n// const todoReducer = (state = initState, action) => {\n//   switch (action.type) {\n//     case \"todoList/addTodo\":\n//       return [...state, action.payload];\n//     case \"todoList/toggleTodoListStatus\":\n//       return [...state, action.payload];\n//     default:\n//       return state.map((todo) =>\n//         todo.id === action.payload\n//           ? {\n//               ...state,\n//               completed: !todo.completed,\n//             }\n//           : todo\n//       );\n//   }\n// };\n// export default todoReducer;\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const todoSlice = createSlice({\n  name: \"todoList\",\n  initialState: [{\n    id: 1,\n    name: \"Studying\",\n    completed: false,\n    priority: \"Medium\"\n  }, {\n    id: 2,\n    name: \"Play game\",\n    completed: true,\n    priority: \"Low\"\n  }, {\n    id: 3,\n    name: \"Watch movie\",\n    completed: false,\n    priority: \"High\"\n  }],\n  reducers: {\n    addTodo: (state, action) => {\n      state.push(action.payload);\n    },\n    toggleTodoListStatus: (state, action) => {\n      const currentTodo = state.find(todo => todo.id === action.payload);\n      currentTodo.completed = !currentTodo.completed;\n    }\n  }\n});","map":{"version":3,"sources":["D:/todo-app/src/components/Todo/TodoSlice.js"],"names":["createSlice","todoSlice","name","initialState","id","completed","priority","reducers","addTodo","state","action","push","payload","toggleTodoListStatus","currentTodo","find","todo"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,UAD6B;AAEnCC,EAAAA,YAAY,EAAE,CACZ;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,IAAI,EAAE,UAAf;AAA2BG,IAAAA,SAAS,EAAE,KAAtC;AAA6CC,IAAAA,QAAQ,EAAE;AAAvD,GADY,EAEZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,IAAI,EAAE,WAAf;AAA4BG,IAAAA,SAAS,EAAE,IAAvC;AAA6CC,IAAAA,QAAQ,EAAE;AAAvD,GAFY,EAGZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,IAAI,EAAE,aAAf;AAA8BG,IAAAA,SAAS,EAAE,KAAzC;AAAgDC,IAAAA,QAAQ,EAAE;AAA1D,GAHY,CAFqB;AAOnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;AAIRC,IAAAA,oBAAoB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACvC,YAAMI,WAAW,GAAGL,KAAK,CAACM,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACZ,EAAL,KAAYM,MAAM,CAACE,OAAxC,CAApB;AACAE,MAAAA,WAAW,CAACT,SAAZ,GAAwB,CAACS,WAAW,CAACT,SAArC;AACD;AAPO;AAPyB,CAAD,CAA7B","sourcesContent":["// const initState = [\r\n//   { id: 1, name: \"Studying\", completed: false, priority: \"Medium\" },\r\n//   { id: 2, name: \"Play game\", completed: true, priority: \"Low\" },\r\n//   { id: 3, name: \"Watch movie\", completed: false, priority: \"High\" },\r\n// ];\r\n// const todoReducer = (state = initState, action) => {\r\n//   switch (action.type) {\r\n//     case \"todoList/addTodo\":\r\n//       return [...state, action.payload];\r\n\r\n//     case \"todoList/toggleTodoListStatus\":\r\n//       return [...state, action.payload];\r\n//     default:\r\n//       return state.map((todo) =>\r\n//         todo.id === action.payload\r\n//           ? {\r\n//               ...state,\r\n//               completed: !todo.completed,\r\n//             }\r\n//           : todo\r\n//       );\r\n//   }\r\n// };\r\n\r\n// export default todoReducer;\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todoList\",\r\n  initialState: [\r\n    { id: 1, name: \"Studying\", completed: false, priority: \"Medium\" },\r\n    { id: 2, name: \"Play game\", completed: true, priority: \"Low\" },\r\n    { id: 3, name: \"Watch movie\", completed: false, priority: \"High\" },\r\n  ],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      state.push(action.payload);\r\n    },\r\n    toggleTodoListStatus: (state, action) => {\r\n      const currentTodo = state.find((todo) => todo.id === action.payload);\r\n      currentTodo.completed = !currentTodo.completed;\r\n    },\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}